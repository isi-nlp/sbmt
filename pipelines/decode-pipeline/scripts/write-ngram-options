#!/usr/bin/env python

import sys, os, argparse, re, shutil, yaml

def wrt(wd,relpath):
    curr = os.path.dirname(os.path.abspath(wd))
    return os.path.normpath(os.path.join(curr,relpath))

parser = argparse.ArgumentParser()
parser.add_argument('-n','--ngram-order',dest='order',default=5)
parser.add_argument('file',nargs='+')
parser.add_argument('-p','--prefix',dest='prefix',default='')
d = parser.parse_args()
d.file=','.join(d.file)

prefix = ''
if d.prefix != prefix:
    prefix = d.prefix + '-'
extension = 'ngram'
if prefix != '':
    extension = d.prefix
narg=[]
tmpdir = os.getenv('TMPDIR')
if tmpdir:
    tmpdir = '$TMPDIR'
else:
    tmpdir = '/tmp'

at_replace = '@'
mixed_case = ''
extre = '\\b%s$' % extension
#print >> sys.stderr, '$$$$', extre
if re.search(extre,d.file):
    conf = yaml.load(open(d.file))
    if 'mixed-case' in conf:
        if conf['mixed-case']:
            mixed_case='m'
    if 'at-replace' in conf:
        if not conf['at-replace']:
            at_replace=''
    if 'order' in conf:
        d.order = conf['order']
    if 'files' in conf:
        d.file = ','.join(wrt(d.file,f) for f in conf['files'])
        
sys.stdout.write('--%sngram-order %s ' % (prefix,d.order))
sys.stdout.write('--%sdynamic-lm-ngram ' % prefix)
    
for n,f in enumerate(d.file.split(',')):
    if re.search(r'\b(LW|lw)\b',f):
        lbl = 'lw'
        oc = 'c'
    elif re.search(r'\b(nz|big|biglm)\b',f):
        lbl = 'big'
        oc = 'c'
    elif re.search(r'\b(nplm)\b',f):
        lbl = 'nplm'
        oc = 'o'
    elif re.search(r'\b(cluster)\b',f):
        lbl = 'cluster'
        oc = 'o'
    else:
        print >> sys.stderr, 'cannot determine type of language model:',sys.argv
        sys.exit(1)
    bname = os.path.basename(f)
    newf = "$TMPDIR/%s" % bname
    #sys.stdout.write('$(cp -u %s %s) ' % (os.path.abspath(f),newf))
    #narg.append('%slm%s=%s[%s%s][%s]' % (d.prefix,str(n+1),lbl,oc,mixed_case,newf))    
    narg.append('%slm%s=%s[%s%s][%s]' % (d.prefix,str(n+1),lbl,oc,mixed_case,os.path.abspath(f)))
sys.stdout.write('multi[%s%s][%s]\n' % (at_replace,mixed_case,','.join(narg)))
