#!/usr/bin/env python
import cfg
import hadoop
import argparse
import string
import os, sys, stat
import itertools
import yaml
import decodescript
import socket
os.putenv('LANG','C')
os.putenv('LC_ALL','C')
os.putenv('MX_RCACHE','0')

class default_abspath(argparse.Action):
    def __call__(self,parser, namespace, values, option_string=None):

        ar = getattr(namespace,'defaults',[])
        values = os.path.abspath(values)
        setattr(namespace,self.dest,values)
        if self.dest == 'rules':
            ar.append((0,os.path.join(values,'rules.config')))
        elif self.dest == 'tune_dir':
            ar.append((1,os.path.join(values,'tune.config')))
        else:
            raise Exception('bad storage name')
        ar.sort()
        setattr(namespace,'default',':'.join(a[1] for a in ar))
        setattr(namespace,'defaults',ar)

class FileList(argparse.Action):
    def __call__(self,parser,namespace,values,option_string=None):
        setattr(namespace,self.dest,' '.join(os.path.abspath(v) for v in values))

parser = argparse.ArgumentParser()
parser.add_argument( 'rules'
                   , nargs='?'
                   , help='output directory of ruleset pipeline'
                   , action=default_abspath
                   , default=argparse.SUPPRESS
                   )
parser.add_argument('corpus'
                   , help='plain corpus file, tokenized and cased consistent with training data'
                   , action=cfg.store_abspath
                   , nargs='?'
                   , default=argparse.SUPPRESS
                   )
parser.add_argument( '-u', '--tune-dir'
                   , help='tune directory. weights assumed to be weights.final inside'
                   , action=default_abspath
                   , nargs='?'
                   , default=argparse.SUPPRESS
                   )
parser.add_argument( '-s', '--corpus-config'
                   , help='describes location of corpus, lc-tok-refs, detok-refs, byline-ne-corpus'
                   , nargs='?'
                   , default=argparse.SUPPRESS
                   , action=cfg.store_corpus )
parser.add_argument( '-w', '--weights'
                   , help='weights file. override weights fond in tune directory'
                   , nargs='?'
                   , default=argparse.SUPPRESS
                   , action=cfg.store_abspath
                   )
parser.add_argument( '-T', '--tstmaster'
                   , nargs='?'
                   , default=argparse.SUPPRESS
                   , dest='tstmaster'
                   , action=cfg.store_abspath
                   )
parser.add_argument( '-e', '--lc-tok-refs'
                   , nargs='+'
                   , default=argparse.SUPPRESS
                   , dest='lctokrefs'
                   , action=FileList
                   )
parser.add_argument( '-E', '--cased-detok-refs'
                   , nargs='+'
                   , default=argparse.SUPPRESS
                   , dest='detokrefs' 
                   , action=FileList
                   )
parser.add_argument( '-v', '--visualize'
                   , help='visualize outputs'
                   , action='store_true'
                   , dest='visualize' )
d = cfg.parse_args( parser
                   , default='$default'
                   , write='$outdir/decode.config'
                   , modeldir=True )

nodes = 1
nodes = int(os.getenv('SLURM_NTASKS','1'))
print >> sys.stderr, nodes, "nodes"
nodefile = os.getenv('PBS_NODEFILE')
nodeset = set()
if nodefile:
    for v,line in enumerate(open(nodefile)):
        nodeset.add(line.rstrip())
#nodes = max(len(nodeset),1)
unodesfile = open(os.path.join(d.tmpdir,'nodefile'),'w')
print >> unodesfile, socket.gethostname()
for f in nodeset:
    if f != socket.gethostname():
        print >> unodesfile, f
unodesfile.close()


hp = d.hadoop

weights=None
if 'tune' in d.config and not weights in d.config:
    d.config['weights']=os.path.join(d.config['tune'],'weights.final')
if 'weights' in d.config:
    weights=d.config['weights']

best1raw = os.path.join(d.outdir,'1best.raw')
best1hyp = os.path.join(d.outdir,'1best.hyp')
bestNraw = os.path.join(d.outdir,'nbest.raw')
bestNsort = os.path.join(d.outdir,'nbest.sort')

def maketemp(foo):
    return os.path.join(d.tmpdir,os.path.basename(foo))

def stage(foo):
    ret = os.path.join(d.outdir,os.path.basename(foo))
    cfg.execute(d,'mv ' + foo + ' ' + ret)
    return ret 

bindir = d.config['variables']['rhbin']
feeder = os.path.join(os.path.dirname(__file__),'scripts','feedecoder')
omitsc = os.path.join(os.path.dirname(__file__),'scripts','omitset')
cfg.execute(d,"mkdir -p $outdir/logs",outdir=d.outdir)
if not os.path.exists(bestNraw):
    mpisize = 1
    bestNraw = maketemp(bestNraw)
    omitfile = maketemp('omitset')
    cfg.execute(d,'touch %s' % omitfile)
    if os.path.exists(bestNraw):
        try:
            cfg.execute(d,"cat %s | grep -o '^NBEST sent=[0-9]* nbest=0 ' | sed -e 's/NBEST sent=// ; s/ .*$//' | uniq > %s" % (bestNraw,omitfile))
        except:
            pass # if no decodes have occurred, then no matches, then fail
    pbsfile = os.path.join(d.tmpdir,'nodefile')
    nodestr = ''
    if nodes > 1:
        mpisize = nodes + 2
        #for v,line in enumerate(open(pbsfile)):
        #    nodestr = nodestr + ' ' + line.strip()
        #    mpisize = v + 2
        mpiscript = os.path.join(bindir,'mpiserv')
        decodefile = decodescript.write_script(d,'nbest',include_instruction_pipe=True,logfile=True)
        inputcmd = string.Template("cat $corpus | $bin/lc | $omitsc $omitfile")
        inputcmd = inputcmd.substitute(corpus=d.config['corpus'],omitfile=omitfile,omitsc=omitsc,bin=bindir)
        scoopcmd = string.Template('mpirun -v --mca mpi_warn_on_fork 0 \
                                              --mca pml bfo \
                                              --mca mtl self,tcp \
                                              --mca btl self,tcp \
                                              --oversubscribe \
                                              --map-by node:PE=$$($bindir/numcpu) \
                                              --bind-to none -x PYTHONPATH -x PATH -np $size \
                                              /home/nlg-02/pust/mpipool $decoder')
        scoopcmd = scoopcmd.substitute( size=max(2,mpisize)
                                      , decoder=decodefile
                                      , bindir=bindir
                                      )
        cfg.execute(d,inputcmd + ' | ' + scoopcmd + ' >> ' + bestNraw)
        #cfg.execute(d,inputcmd + ' | ' + decodefile + ' >> ' + bestNraw)
    else:
        decodefile = decodescript.write_script(d,'nbest',include_instruction_pipe=True,logfile=False)
        cfg.execute(d , r"cat $corpus | $bin/lc -f'%id\t%line' | $omitsc $omitfile | $decoder >> $nbest 2> >(tee -a $outdir/logs/decoder.log | grep -o 'sentence .* processed' 1>&2)"
                      , corpus=d.config['corpus']
                      , omitfile=omitfile
                      , omitsc=omitsc
                      , bin=bindir
                      , decoder=decodefile
                      , nbest=bestNraw
                      , outdir=d.outdir )
    bestNraw = stage(bestNraw)
else: 
    print >> sys.stderr, 'decoding skipped. remove $outdir/nbest.raw to re-decode'

sortcmd="grep '^NBEST' < %s > %s" % (bestNraw,bestNsort)

if not os.path.exists(bestNsort) or not os.path.exists(best1raw):
    cfg.execute(d,sortcmd)
    cfg.execute(d,'grep "^NBEST sent=[0-9]* nbest=0" < %s > %s' % (bestNsort,best1raw))

bestNxmltmp = os.path.join(d.tmpdir,'nbesttmp.xml')
bestNxml = os.path.join(d.outdir,'nbest.xml')

scoreargmap = { 'decodehyp': best1hyp
              , 'decoderaw': best1raw
              , 'nbestraw':bestNraw
              , 'corpus':d.config['corpus'] 
              }

extract = os.path.join(d.scriptdir,'extract-hypothesis.pl')
if not os.path.exists(best1hyp):
    best1hyptmp = best1hyp + '.tmp'
    cfg.execute(d,extract + ' ' + best1raw + ' > ' + best1hyptmp)
    cfg.execute(d,'mv %s %s' % (best1hyptmp,best1hyp))

if 'origcorpus' in d.config and d.config['origcorpus']:
    scoreargmap['origcorpus'] = d.config['origcorpus']
    cfg.execute(d,"$scriptdir/detok $best $origcorpus > $outdir/1best.hyp.detok",best=best1hyp,scriptdir=d.scriptdir,outdir=d.outdir,origcorpus=d.config['origcorpus'])


if 'tstmaster' in d.config and d.config['tstmaster']:
    scoreargmap['origcorpus'] = d.config['origcorpus']
    bestNxml = os.path.join(d.outdir,os.path.basename(d.config['tstmaster']))
    if not os.path.exists(bestNxml):
        cfg.execute(d,string.Template(d.config['decoder']['package']).substitute(scoreargmap) + ' > ' + bestNxmltmp)
        cfg.execute(d,'mv %s  %s' % (bestNxmltmp,bestNxml))
    else:
        print >> sys.stderr, 'xml output skipped. remove $outdir/nbest.xml to re-create'

for file,cmd in d.config['decoder']['score'].iteritems():
    try:
        newcmd = string.Template(cmd).substitute(scoreargmap)
    except Exception as e:
        print >> sys.stderr, 'skipping creation of', file, 'from', '"%s"'%cmd, '(%s)'%e
        continue
    cfg.execute(d,'%s > %s' % (newcmd,os.path.join(d.outdir,file)))

if d.config['visualize']:
    minlen = d.config['visualization-options']['min-length']
    maxlen = d.config['visualization-options']['max-length']
    endsin = d.config['visualization-options']['terminal-punctuation']
    rulefields = ','.join(k for (k,v) in d.config['visualization-options']['rule-fields'].iteritems() if v)
    print >> sys.stderr, "rule-fields", d.config['visualization-options']['rule-fields']
    nbestfields = ','.join(k for (k,v) in d.config['visualization-options']['nbest-fields'].iteritems() if v)
    hp = d.hadoop
    gview = os.path.join(d.config['variables']['rhbin'],'xrsdb_search')
    hp.start(reducers=4)
    hp.put(os.path.join(d.outdir,'nbest.sort'),'nbest')
    cmd = '$reduce $latvizprep --xsearchdb $rules/xsearchdb --grammar-view $grammar_view --per-sentence $tmpdir --output $tmpdir/viz-%k.txt --index $tmpdir/viz-%k.idx --corpus-map $corpus/corpus.map'
    cmd = string.Template(cmd).safe_substitute( latvizprep=os.path.join(d.scriptdir,'lat-viz-prep')
                                              , reduce=os.path.join(d.scriptdir,'nbest_viz')
                                              , tmpdir=d.tmpdir
                                              , grammar_view=gview
                                              , rules=d.config['rules']
                                              , corpus=d.config['cprep']
                                              )
    cfg.execute(d,'rm -rf $tmpdir/viz*',tmpdir=d.tmpdir)
    hp.mapreduce( mapper=os.path.join(d.scriptdir,'nbest_map') + ' -m %d -M %d' % (minlen,maxlen)
                , reducer=cmd
                , input='nbest'
                , output='latvizprep.out'
                , sortkeys=2
                , partitionkeys=1
                , options='-jobconf mapred.reduce.tasks.speculative.execution=false -jobconf mapred.map.tasks=200 '
                )
    cmd = 'mkdir -p $tmpdir/viz/fig; cd $tmpdir/viz; /home/nlg-05/voeckler/perl/bin/perl $scriptdir/lat-viz-gen --features $weights --language $langcode --title $outdir --dataset $corpus --max-length $maxlen --min-length $minlen $endsin --rule-fields $rulefields --nbest-fields $nbestfields --rule-column-width 70 --nbest-column-width 100 --num-to-highlight 5 --nbest-max 50 $englishtoklc --no-missing-content --eps-files fig --tree 4 --output viz.tex $tmpdir/viz-*.txt'
    englishtoklc=''
    if 'lctokrefs' in d.config and d.config['lctokrefs']:
        englishtoklc=' '.join('--english %s' % lc for lc in d.config['lctokrefs'].split()) + ' --bleu-plus-one --brevity-penalty'
    endsincmd = ''
    if endsin:
        endsinpth =  os.path.join(d.tmpdir,'endsin.txt')
        endsinfile = open(endsinpth,'w')
        print >> endsinfile, '\n'.join(endsin)
        endsinfile.close()
        endsincmd = '--ends-in %s' % endsinpth
    cmd = string.Template(cmd).substitute( tmpdir=d.tmpdir
                                         , outdir=os.path.basename(d.outdir)
                                         , scriptdir=d.scriptdir
                                         , corpus=d.config['corpus']
                                         , englishtoklc=englishtoklc
                                         , langcode=d.config['source-language-code3']
                                         , endsin=endsincmd
                                         , nbestfields=nbestfields
                                         , rulefields=rulefields
                                         , maxlen=maxlen
                                         , minlen=minlen
                                         , weights=os.path.abspath(weights)
                                         )
    cfg.execute(d,cmd)
    cfg.execute(d,'ls $tmpdir/viz/fig/*/*-p > $tmpdir/viz/fignames',tmpdir=d.tmpdir)
    hp.put(os.path.join(d.tmpdir,'viz','fignames'),'fignames')
    hp.mapreduce( mapper=os.path.join(d.scriptdir,'vizfig2pdf')
                , input='fignames'
                , output='vizfig2pdf.out'
                , options='-jobconf mapred.reduce.tasks.speculative.execution=false -jobconf mapred.map.tasks=200'
                )

    cfg.execute(d,'cd $tmpdir; cp $libdir/*.{sty,tex} viz; ls viz/fig/*/*.ps; tar czvf $outdir/viz.tex.tar.gz viz',outdir=d.outdir, tmpdir=d.tmpdir,libdir=os.path.join(d.rootdir,'lib'))
    cfg.execute(d,'cd $tmpdir/viz; latex -interaction=batchmode viz.tex || test -e viz.dvi',tmpdir=d.tmpdir)
    cfg.execute(d,'cd $tmpdir/viz; dvipdf viz.dvi || test -e viz.pdf; cp viz.pdf $outdir/viz.pdf',outdir=d.outdir,tmpdir=d.tmpdir)
